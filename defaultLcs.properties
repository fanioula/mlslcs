### Number of labels in the target problem.
numberOfLabels = 4

### Path to the .arff file containing the instances that the LCS will be trained with.
filename = datasets/mlposition4.arff

### Path to the .arff file  containing the instances that the LCS will be evaluated against. Comment out for k-fold cross-validation.
testFile = datasets/mlposition4.arff

### Number of folds for k-fold cross-validation. Comment-out for train-test evaluation.
#foldsToRun = 2
### Repeat each fold run <numOfFoldRepetitions> times and take into account the best result for the final evaluation metrics.
#numOfFoldRepetitions = 4
### Number of threads when running folds in parallel (in a machine with multiple processors). Each thread is assigned a fold’s run(s).
#numOfThreads = 1

### LCS implementation to be used.
lcsType = gr.auth.ee.lcs.implementations.MLSLCS

### Iteration information.
trainIterations = 1500

### Control algorithm output.
### The directory where all algorithm output will be directed. Default value is “output”.
#outputDir = output
### Store information about the progress of the training process every <callbackRate> iterations. 
callbackRate = 10
### Store information about the rule population and its metrics in population<X>.txt every <storeRulePopulationSteps> iterations.
storeRulePopulationSteps = 1500
### The LCS is trained for an additional <UpdateOnlyPercentage>*<trainIterations> iterations 
### (after the initial <trainIterations> iterations) with the genetic algorithm deactivated.
UpdateOnlyPercentage = .1
### Path to the file where the final ruleset is to be saved. Comment-out when rules do not need to be saved.  
#saveRulesFile = rulesOut.txt
### Path to the file from which a ruleset should be read and used to initialize the LCS. Comment-out when no such initialization is required.
#loadRulesFile = output/rulesOut.txt

### Output file for final classification decisions for the instances in <testFile>. Comment-out when decisions do not need to be saved.  
#testClassificationFile = outputClassification

### Population size (maximum number of micro-classifiers).
populationSize = 10000

### Generalization rates (per attribute/label) for covering. 
AttributeGeneralizationRate = 0.33
LabelGeneralizationRate = 0.2

### Number of bits used for representing numeric attributes.
precisionBits = 5

### Exploration options.
### Check whether crossover will be applied ( Math.random() < crossoverRate ) 
### once (<gaSelection> = 0) or for each child to be created (<gaSelection> = 1)
gaSelection = 1
### Crossover operator to be used (0: Simple single-point crossover, 1: Multi-label crossover)
crossoverOperator = 1
crossoverRate = .8
mutationRate = .04
thetaGA = 2000

### Parameters for update component.
### Learning rate used to calculate the niche size estimate.
beta = 0.2
Acc0 = 0.99
N = 10
THETA_EXP = 10
THETA_DEL = 10
OMEGA = 0.9
PHI = 1.0

### Parameters for the clustering-based initialization component.
initializePopulation = true
ClusteringAttributeGeneralizationRate = 0.0
ClusteringLabelGeneralizationRate = 0.0
CLUSTER_GAMMA = 0.2

### Fitness mode.
### 0: F = num * (acc)^n
### 1: F = F + beta * (num * (acc)^n - F)
### 2: fitness sharing 
FITNESS_MODE = 0
### Learning rate for fitness sharing (only used when <FITNESS_MODE> = 2).
Alpha = 0.1

### Deletion mode.
### 0: (cl.exp > THETA_DEL) && (cl.fitness < DELTA * meanPopulationFitness) ? cl.cs * (meanFitness / cl.fitness) : cl.cs
### 1: (cl.exp > THETA_DEL) && (cl.fitness < DELTA * meanPopulationFitness) ? cl.cs * (meanFitness / Math.pow(cl.fitness,N)) : cl.cs
### 2: (cl.exp < THETA_DEL) ? 1 / (cl.fitness * DELTA) : 1 / (cl.fitness * Math.exp(-cl.cs + 1))
### 3: (cl.exp < THETA_DEL) ?  Math.exp(1 / cl.fitness) : Math.exp(cl.cs - 1) / cl.fitness
DELETION_MODE = 3
#DELTA = 0.1

### Update mode.
### 0: add GA offspring to the population (and possibly control population size through deletion) immediately after applying the GA for each label
### 1: add all GA offspring to the population AT ONCE, after applying the GA for ALL labels
UPDATE_MODE = 1

### Check every new classifier for subsumption against the whole population.
thoroughlyCheckWithPopulation = true

### Specify whether indifferent rules (wildCards) are allowed to be part of [C]s (and thus candidates for GA reproduction).
wildCardsParticipateInCorrectSets = false
### If <wildCardsParticipateInCorrectSets> is true, control the population of the correct sets (<balanceCorrectSets> = true):
### Examine the numerosity of a ‘correct set’ comprising only wildcards [C#only] against that of a ‘correct set’ without them [C-#].
### If |C#only| <= wildCardParticipationRatio * |C-#|, use the full correct set (consisting of both wildcards and non-wildcard rules)
### Else, use the ‘correct set’ without wildcards [C-#].
balanceCorrectSets = false
wildCardParticipationRatio = 1

### Turn ‘control match set’ population control strategy on/off.
matchSetPopulationControl = false


